//
//  VectorPrinter.swift
//  UptakeUI
//
//  Created by Uptake on 5/30/17.
//  Copyright Â© 2017 Uptake. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//



import UIKit
/// :nodoc:
public class VectorPrinter : NSObject {

    //// Drawing Methods

    @objc public dynamic class func drawLogotype(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 170, height: 22), resizing: ResizingBehavior = .aspectFit, color: UIColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 170, height: 22), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 170, y: resizedFrame.height / 22)


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 84.2, y: 21.5))
        bezierPath.addLine(to: CGPoint(x: 84.2, y: 14.22))
        bezierPath.addLine(to: CGPoint(x: 98.43, y: 0))
        bezierPath.addLine(to: CGPoint(x: 112.6, y: 14.13))
        bezierPath.addLine(to: CGPoint(x: 112.6, y: 21.41))
        bezierPath.addLine(to: CGPoint(x: 98.43, y: 7.25))
        bezierPath.addLine(to: CGPoint(x: 84.2, y: 21.5))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 35.34, y: 5.5))
        bezierPath.addLine(to: CGPoint(x: 35.34, y: 10.72))
        bezierPath.addLine(to: CGPoint(x: 48.28, y: 10.72))
        bezierPath.addCurve(to: CGPoint(x: 50.61, y: 8.23), controlPoint1: CGPoint(x: 49.78, y: 10.69), controlPoint2: CGPoint(x: 50.61, y: 9.89))
        bezierPath.addLine(to: CGPoint(x: 50.61, y: 7.99))
        bezierPath.addCurve(to: CGPoint(x: 48.28, y: 5.5), controlPoint1: CGPoint(x: 50.61, y: 6.33), controlPoint2: CGPoint(x: 49.78, y: 5.53))
        bezierPath.addLine(to: CGPoint(x: 35.34, y: 5.5))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 35.34, y: 21.19))
        bezierPath.addLine(to: CGPoint(x: 29.81, y: 21.19))
        bezierPath.addLine(to: CGPoint(x: 29.81, y: 0.58))
        bezierPath.addLine(to: CGPoint(x: 48.12, y: 0.58))
        bezierPath.addCurve(to: CGPoint(x: 50.06, y: 0.74), controlPoint1: CGPoint(x: 48.71, y: 0.58), controlPoint2: CGPoint(x: 49.53, y: 0.64))
        bezierPath.addCurve(to: CGPoint(x: 55.96, y: 8.05), controlPoint1: CGPoint(x: 53.9, y: 1.26), controlPoint2: CGPoint(x: 55.96, y: 3.84))
        bezierPath.addCurve(to: CGPoint(x: 50.37, y: 15.26), controlPoint1: CGPoint(x: 55.96, y: 12.16), controlPoint2: CGPoint(x: 53.99, y: 14.65))
        bezierPath.addCurve(to: CGPoint(x: 48.12, y: 15.45), controlPoint1: CGPoint(x: 49.84, y: 15.36), controlPoint2: CGPoint(x: 48.98, y: 15.45))
        bezierPath.addLine(to: CGPoint(x: 35.34, y: 15.45))
        bezierPath.addLine(to: CGPoint(x: 35.34, y: 21.19))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 17.36, y: 21.19))
        bezierPath.addLine(to: CGPoint(x: 7.84, y: 21.19))
        bezierPath.addCurve(to: CGPoint(x: 0, y: 13.36), controlPoint1: CGPoint(x: 2.73, y: 21.13), controlPoint2: CGPoint(x: 0.09, y: 18.46))
        bezierPath.addLine(to: CGPoint(x: 0, y: 0.58))
        bezierPath.addLine(to: CGPoint(x: 5.35, y: 0.58))
        bezierPath.addLine(to: CGPoint(x: 5.35, y: 13.36))
        bezierPath.addCurve(to: CGPoint(x: 8.27, y: 16.28), controlPoint1: CGPoint(x: 5.41, y: 15.26), controlPoint2: CGPoint(x: 6.36, y: 16.16))
        bezierPath.addLine(to: CGPoint(x: 16.93, y: 16.28))
        bezierPath.addCurve(to: CGPoint(x: 19.85, y: 13.36), controlPoint1: CGPoint(x: 18.78, y: 16.19), controlPoint2: CGPoint(x: 19.85, y: 15.2))
        bezierPath.addLine(to: CGPoint(x: 19.85, y: 0.58))
        bezierPath.addLine(to: CGPoint(x: 25.2, y: 0.58))
        bezierPath.addLine(to: CGPoint(x: 25.2, y: 13.36))
        bezierPath.addCurve(to: CGPoint(x: 17.36, y: 21.19), controlPoint1: CGPoint(x: 25.11, y: 18.46), controlPoint2: CGPoint(x: 22.46, y: 21.13))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 74.32, y: 21.19))
        bezierPath.addLine(to: CGPoint(x: 68.79, y: 21.19))
        bezierPath.addLine(to: CGPoint(x: 68.79, y: 5.5))
        bezierPath.addLine(to: CGPoint(x: 59.21, y: 5.5))
        bezierPath.addLine(to: CGPoint(x: 59.21, y: 0.58))
        bezierPath.addLine(to: CGPoint(x: 83.91, y: 0.58))
        bezierPath.addLine(to: CGPoint(x: 83.91, y: 5.5))
        bezierPath.addLine(to: CGPoint(x: 74.32, y: 5.5))
        bezierPath.addLine(to: CGPoint(x: 74.32, y: 21.19))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 144.39, y: 21.19))
        bezierPath.addLine(to: CGPoint(x: 137.45, y: 21.19))
        bezierPath.addLine(to: CGPoint(x: 129.27, y: 13.02))
        bezierPath.addLine(to: CGPoint(x: 121.1, y: 21.19))
        bezierPath.addLine(to: CGPoint(x: 117.72, y: 21.19))
        bezierPath.addLine(to: CGPoint(x: 117.72, y: 0.49))
        bezierPath.addLine(to: CGPoint(x: 122.67, y: 0.49))
        bezierPath.addLine(to: CGPoint(x: 122.67, y: 12.68))
        bezierPath.addLine(to: CGPoint(x: 134.71, y: 0.58))
        bezierPath.addLine(to: CGPoint(x: 141.72, y: 0.58))
        bezierPath.addLine(to: CGPoint(x: 132.75, y: 9.55))
        bezierPath.addLine(to: CGPoint(x: 144.39, y: 21.19))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 170, y: 21.2))
        bezierPath.addLine(to: CGPoint(x: 148.03, y: 21.2))
        bezierPath.addLine(to: CGPoint(x: 148.03, y: 0.58))
        bezierPath.addLine(to: CGPoint(x: 170, y: 0.58))
        bezierPath.addLine(to: CGPoint(x: 170, y: 5.36))
        bezierPath.addLine(to: CGPoint(x: 153.05, y: 5.36))
        bezierPath.addLine(to: CGPoint(x: 153.05, y: 8.66))
        bezierPath.addLine(to: CGPoint(x: 170, y: 8.66))
        bezierPath.addLine(to: CGPoint(x: 170, y: 13.15))
        bezierPath.addLine(to: CGPoint(x: 153.05, y: 13.15))
        bezierPath.addLine(to: CGPoint(x: 153.05, y: 16.43))
        bezierPath.addLine(to: CGPoint(x: 170, y: 16.43))
        bezierPath.addLine(to: CGPoint(x: 170, y: 21.2))
        bezierPath.close()
        bezierPath.usesEvenOddFillRule = true
        color.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }




    @objc(VectorPrinterResizingBehavior)
    public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.

        public func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }

            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)

            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }

            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}
